import { decorate, configure, observable, computed, extendObservable, action, runInAction, when, autorun } from 'mobx';
import { observer } from 'mobx-react';
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import './index.css';

import * as serviceWorker from './serviceWorker';

configure({ enforceActions: "observed" });

class Store {
    user = null;
    @observable count = 0;

    getUser() {
        console.log("get user func");
        fetch('https://randomuser.me/api/')
            .then(res => res.json())
            .then(json => {
                if (json.results) {
                    runInAction(() => this.user = json.results[0])
                    // this.setUser(json.results[0]);
                }
            })
    }

    @action increment() {
        this.count++;
    }

    @action decrement() {
        this.count--;
    }

    // setUser(result) {
    //     this.user = result;
    // }
}

decorate(Store, {
    user: observable,
    getUser: action.bound,
    setUser: action,
})

const appStore = new Store();

when(
    () => appStore.count > 5,
    () => alert("!!!!>>>>5")
);

autorun(
    () => {
        if (appStore.count > 10)
            alert(`counter=${appStore.count}`);
    },
    {
        name: "Autorun fucntion",
        delay: 3000,
    }
);


@observer class App extends Component {
    render() {
        const { store } = this.props;
        console.log(store.getUser);

        return (
            <div className="App">
                <button onClick={store.getUser}>Get user</button>
                <h1>{store.user ? store.user.login.username : "default user"}</h1>
                <button onClick={() => store.increment()}>+</button><button onClick={() => store.decrement()}>-</button>
                <h1>{store.count}</h1>
            </div >
        );
    }
}

ReactDOM.render(<App store={appStore} />, document.getElementById('root'));


// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();
